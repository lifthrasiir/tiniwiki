<?php exit; ?>
VGluaVdpa2lHb2Fs	2	YW5vbnltb3Vz	127.0.0.1	1078745235	
! TiniWiki의 목표

TiniWiki를 처음 만들기 시작할 때 [토끼군]은 몇 가지 목표를 세웠었다. 이 목표들이 과연 0.1이 나올 쯤 얼마나 실현되어 있을 지는 두고 봐야 겠지만, 할 수 있는 한 이 목표를 향해서 돌진(rush...)하고 싶다. 다음은 그 목표들이다.

!! 꼭 필요한 것만 있어야 한다.

아는 사람은 알지만 [토끼군]은 wikiX의 개발자로 참여하고 있다. (너무 게을러서 commit하는 빈도가 최악이다) 개발자 노릇 하기 전부터 wikiX 소스를 많이 들여다 보았고, 웬만한 기능은 다 익혔었는데, 내가 생각하는 wikiX의 최대의 단점은 "필요 없는 것이 너무 많다"라는 것이었다. (희대 님도 말하시길 저 기능을 모두 쓸 사람은 없을 거라고...) wikiX의 파싱 속도는 그런 걸 반영하듯 상대적으로 좀 느린 편이다. (웬만한 페이지 파싱하는 데 0.1초 이상 든다.)

TiniWiki는 이름에서 볼 수 있듯, 최대한 필요 없는 건 빼고 깔끔하게 문법을 디자인했다. (그렇다고 wikiX에 있는 기능이 죄다 필요 없는 건 아니다. 문제는 "적게 사용되는 문법"이 많기 때문에 그걸 파싱하는 데 좀 더 많은 비용이 필요하다는 것이다.) 나는 wikiX의 \\i나 \\j 같은 기능이 종종 편리하게 쓰인다는 건 충분히 인정하지만, 그게 많이 쓰인다고는 못 하겠다.

TiniWiki에서 지원하는 문법은 기본적인 링크와 인터위키, 외부 링크 기능, 굵게와 기울게, 제목, 목록, 표(지원할 지 말지 고민 중이다), 그리고 HTML 태그와 이게 부족할 때 써 먹는 플러그인이 거의 전부이다. 다른 기능은 많이 쓰는 사람이 없거나 플러그인으로 구성하는 게 더 합당하다고 생각되어서 뺐다. 희대 님의 한 마디를 인용해 보겠다: __simple is best! :)__

''내가 이런 소리를 한다고 해서 wikiX가 나쁜 위키엔진이라고 생각하진 말길 바란다. wikiX도 나름대로 필요한 사람들에게는 좋은 선택이다. (wikiX만 가지고 프로그래밍 비스무리하게 할 수 있을 정도이기 때문에, 분명 고급 사용자에게는 최고의 위키엔진이다.) 하지만 난 복잡한 걸 별로 좋아하지 않는다. :) (만약, 복잡하긴 하지만 빠르다면 좀 고려해 볼 만 하다. wikiX는 안타깝게도 내가 말하는 "빠른 위키엔진"에서 좀 떨어져 있는 위키엔진이다.)''

!! 빨라야 한다.

당근이다. 빠르면 빠를 수록 좋다. 왜냐하면 위키위키라는 말 자체가 "빨리빨리"라는 말이기 때문에, 만약 위키엔진이 느리다면 그 정의 자체를 무시하는 (말도 안 되는) 결과가 나올 것이다. :)

당연히 이건 농담이고... 사실 1초 안에 파싱되기만 하면 문제는 없다. 문제는 사람들이 그 문제의 "1초"마저도 기다리지 못 한다는 데 있다. 언제 이런 걸 본 적이 있다. 7초 안에 뜨지 않는 웹 페이지는 7초 후에 95%의 사람이 창을 닫아 버린다고. (경험적으로는 99%가 넘는다고 본다.) 최대한 빠르면 빠를 수록 피드백이 빠르기 때문에 좀 더 효율적인 사용이 가능하다고 생각된다.

게다가 이런 웹 프로그램에서 속도는 여러 가지로 중요하다. 그 이유 중 하나가 "만약의 경우"를 대비하기 위해서인데, 한 번 생각해 보자. 왜 php 개발자들은 게시판을 만든 후 100만 개의 글을 넣고 stress test를 하는가? (실제로는 2만 건도 안 들어 가는 게시판에) 그게 다 "만약에"를 위한 것이다. 만약 진짜로 폐인들이 몰려 와서 하루만에 게시판에 수 만 건의 글을 써 버렸다면 어떻게 할 것인가? 마찬가지로, 위키도 큰 페이지가 있을 가능성을 생각해야 한다. (wikiX 공식 홈페이지의 `wikiXdownloadNhistory.1 페이지는 그 크기가 장난 수준이 아닐 정도로 크고, 그 파싱 시간이 7~8초 정도 될 정도로 시간이 오래 걸린다. 이 프로그램 만들고 나서 한 번 그 파싱 시간을 비교해 볼 생각인데, 플러그인 같은 걸 다 구현해도 아마 wikiX보단 빠르지 느릴 것 같진 않다. :)

''위키엔진에서 "빠르다"는 것은 보통 어떤 한 페이지를 파싱하는 속도를 가지고 따지는 경우가 많다. 하지만 나는 파싱 속도 뿐만 아니라, 페이지 히스토리나 그런 여러 가지 다른 속도도 최대한 할 수 있는 대로 최적화할 생각이다. 우선 순위는 파싱 속도에 있으니까 파싱 속도를 획기적으로 높일 수 있다면 다른 속도를 좀 희생시킬 생각은 있다. :) (실제로 이미 한 번 그랬다.)''

!! 사용하기 쉬워야 한다.

아무리 성능이 좋은 프로그램이라도 그걸 사용하기 어렵거나 배우기 힘들면 자연히 사용자의 눈에서 멀어지기 마련이다. (wikiX는... 글쎄. 중간 쯤에 있지 않을까 싶다.)

그것 때문에 나는 최대한 기능 디자인을 할 때 사용자가 이해하기 쉽도록 (보통 이해하기 쉽게 하려면 어포던스를 많이 따지는데, 꼭 그러지 않아도 이해하기 쉽게 하는 방법은 여러 가지가 있다. 뭐 나도 최대한 어포던스 따질 생각이지만 :) 만들고, 혹시나 좀 어렵게 느껴진다 싶은 기능은 최대한 문서화시켜서 ("티니위키 따라하기!" 이런 형식으로 할까?) 사용자가 어려움을 느끼지 못 할 정도로 만들고 싶다. ''내가 생각하는 가장 이상적인 프로그램은, 설명서 없이 이 프로그램이 어떤 프로그램이다 정도만 알면 바로 바로 보고 이해해서 쓸 수 있는 프로그램인데, 그게 있기나 할까? 아무튼 그런 프로그램을 지향하려 한다.''

사용하기 쉽다는 것은 설치나 설정이 쉽다는 뜻도 될 수 있겠다. (당근 관리자의 입장에서...) 개인적으로 wikiX를 윈도우즈에서 사용할 때 shell script 때문에 상당히 귀찮았었는데 (install.sh나 ext.sh 같은 것들... 특히 확장기능 설치할 때는 ext.sh를 꼭 써야 하는데 이거 안 쓸 경우 각각의 확장기능에서 어느 걸 수동으로 설치해야 할 지부터 시작해서 귀찮은 게 끊이질 않는다.) 나는 최대한 "복사 -> 기본 설정 -> 설치 끝"의 절차를 따르게 하려고 한다. 기본 설정이란 건 프로그램이 위치한 디렉토리나 대문 페이지 이름, 그리고 퍼미션 바꿔 주는 것 정도로 할 생각인데 (.tar.gz 같은 경우 올린 후 풀면 퍼미션 안 바꿔도 되게 할까보다.) 그 정도면 따라 하는 데 별로 어렵진 않을 것이다. (좀 많아진다 싶으면 install.php라도 만들 생각이다.)

!! 표준을 준수한다.

[토끼군]은 XHTML, CSS, DOM을 제대로 안 쓴 홈페이지는 일단 점수 5점 정도 깎고 시작한다. (특히 MSIE 같은 특정 브라우저 아니면 아예 제대로 보이지도 않는 홈페이지는 50점 이상 깎고 "끝낸다." -- 시작하지도 않는다;;) 그런 점에서 MoniWiki는 멋진 본보기다. (XHTML은 확실히 지원한다.)

아무튼... 이거 만든 이유 중 하나가, wikiX 쓰는 게 가장 편한데 wikiX에서 내뱉는 출력물은 XHTML이 아니라 HTML 4.0 Transitional이어서 그런다. -_-; (난 정식으로 홈페이지 만들 때는 XHTML 쓴다.) 구현하는 데 어렵진 않았는데 의외로 XHTML과 CSS가 브라우저마다 따로 놀고 있어서 테마 만들 때도 좀 신경 써 줘야 했다 (...) 아무튼, 할 수 있다면 최대한 디자인 부분은 CSS로 통일하고 XHTML 문서를 출력하도록 만들 것이다.

!! 그 외의 작은 목표들

!!! 문서화가 잘 되어야 한다. (혹은 문서가 필요 없을 정도로 간편해야 한다)

wikiX는 기능이 워낙 많다 보니까 문서가 기능에 비해 좀 쪼달린다-_-라는 느낌이 들 때가 많다. 그 외에 여러 프로그램들을 보면서 사용자를 위한 문서조차 제대로 안 된 프로그램도 있고, 사용자가 프로그램을 수정한다거나 확장 기능을 설치할 때 그 방법이 제각각이거나(특히 제로보드! 확장 기능 같은 건 아예 염두에도 두지 않고 만든 프로그램이어서 환장하는 경우이다. -_-) 거기에 대한 설명이 충분하지 않은 것들이 꽤 있다.

그런 데서 본받을 만한 프로그램은 블로그 프로그램인 Tatter tools이다. 이건 아예 문서 자체가 별로 필요하지 않을 정도로 사용자가 사용하기에 그리 어렵지 않은 프로그램이다. ("태터 툴즈 따라하기"라는 제목의 강좌가 한 여덟 편 올라 왔는데 그것 가지고도 웬만한 건 다 쓸 수 있을 거라고 생각될 정도이다.) 꽤 잘 만든 프로그램이라고 생각되는데 나도 그렇게 만들 수 있으면 좋겠다. :)

아무튼... 문서가 필요 없을 정도면 좋긴 한데 위키라는 개념 자체를 이해하지 못 하는 사람이 대다수라서 최소한의 문서 정도는 필요하다. 그래서 나는 미리 WikiSeed 페이지들을 적당하게 넣어 놓을 생각이다. (PhpWiki는 너무 많다. 무슨 WikiSeed 페이지가 50개를 넘냐... -_-; 20개 안팎이면 충분하다. 대조적으로 wikiX는 아예 페이지 수가 한 자리인 데다가 설명이 거의 없다. 있다면 SearchPages 페이지-_-) 아예 인터넷이 안 되는 환경에서도 충분히 사용할 수 있을 정도로 만들 수 있다면 더할 나위 없겠다. :)

!!! 위키로서 갖춰야 할 기본적인 기능은 당근 갖춘다.

그래서 대부분의 위키가 갖추고 있는 기능(This is a minor edit 같은 것들...)은 최대한 넣으려 하고 있다. 그건 어렵지 않으니 패쓰 :)

!!! I18N을 고려한다.
''I18N = Internationalization, 국제화. I와 N 사이에 18개의 글자가 들어 있어서 이런다.''

I18N을 고려하려면 몇 가지 사항을 생각해 봐야 한다.

__- UTF-8과 같은 다른 문자셋과 인코딩을 사용할 수 있어야 한다.__ %%%
현재 TiniWiki는 \\x00부터 \\x1F까지의 문자를 사용하지 않는 인코딩이라면 뭐든 사용 가능하다. :) UTF-8 같은 건 당근 되어야 한다.

__- 외국어 문서나 서포트가 가능해야 한다.__ %%%
솔직히 이게 좀 걱정되는 부분이긴 하다. 아무래도 외국어라면 영어가 가장 대표적일텐데, 개인적으로 영어에 엄청난 컴플렉스를 가지고 있기 때문에 환장할 노릇인데... 최대한 노력하면 될 것이라 생각한다. :)

__- 외국의 사정에 맞춰서 만들어져야 한다.__ %%%
이게 무슨 소린가 하면, 외국의 문화 같은 것으로 인해서 생길 수 있는 오해를 충분히 고려해야 한다는 것이다. 예를 들어서 \`가 많이 사용되는 언어의 경우 \`가 아니라 다른 문자로 WikiWord escape를 하는 게 훨씬 더 좋을 것이다. 일단 나는 영어와 한국어 기준으로 만들고 있기 때문에 문법에 사용되는 기호를 최대한 영어와 한국어에서 빈도가 적은 것으로 선택하려 했는데, 딴 건 다 좋았지만(\[..] 이게 가장 거시기하지만 일반적으로 많이 쓰인다 생각되어 채택하였다. 어차피 한국어는 \[..]보다 <..>가 더 많이 쓰이는 게 "정상"이다. -_-) \`가 좀 걸렸는데, 내가 아는 어떤 형이 \`는 영어에서도 빈도가 적다고 말을 해서 그냥 덥썩 저걸로 골랐다. -_-

---
뭐... 또 생각 나면 계속 업데이트해야 겠다. :)